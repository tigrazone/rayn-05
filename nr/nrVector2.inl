////////////////////////////////////////////////////////////////////////////
//
// nrVector2.inl
//
// A class for vector functions.
//
// Nate Robins, March 2001.
//
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////

#include "nrVector2.h"

#include "nrMath.h"


////////////////////////////////////////////////////////////////////////////
// Public
////////////////////////////////////////////////////////////////////////////

inline nrVector2::nrVector2( void )
{
}

////////////////////////////////////////////////////////////////////////////

inline nrVector2::nrVector2( float _x, float _y )
{
    x = _x;
    y = _y;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::operator-( void ) const
{
    nrVector2 w;
    
    w.x = -x;
    w.y = -y;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::operator-( const nrVector2& v ) const
{
    nrVector2 w;
    
    w.x = x - v.x;
    w.y = y - v.y;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::operator+( const nrVector2& v ) const
{
    nrVector2 w;
    
    w.x = x + v.x;
    w.y = y + v.y;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::operator*( float s ) const
{
    nrVector2 w;
    
    w.x = x * s;
    w.y = y * s;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::operator/( float s ) const
{
    nrVector2 w;
    float t = 1.0f / s;
    
    w.x = x * t;
    w.y = y * t;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline float nrVector2::Dot( const nrVector2& v ) const
{
    float dot;
    
    dot = ( x * v.x ) + ( y * v.y );
    
    return dot;
}

///////////////////////////////////////////////////////////////////////////

inline float nrVector2::Length( void ) const
{
    float l;
    
    l = nrMath::Sqrt( ( x * x ) + ( y * y ) );
    
    return l;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::Unit( void ) const
{
    float l;
    nrVector2 w;
    const nrVector2& u = *this;
    
    l = Length();
    
    if ( l == 0.0f )
    {
        w = u * 0.0f;
    }
    else 
    {
        w = u * ( 1.0f / l );
    }
    
    return w;
}

///////////////////////////////////////////////////////////////////////////

inline float nrVector2::Norm( void ) const
{
    float n;
    
    n = ( x * x ) + ( y * y );
    
    return n;
}

///////////////////////////////////////////////////////////////////////////

inline nrVector2 nrVector2::MidPoint( const nrVector2& v ) const
{
    nrVector2 w;
    
    w.x = ( x + v.x ) / 2.0f;
    w.y = ( y + v.y ) / 2.0f;
    
    return w;
}

///////////////////////////////////////////////////////////////////////////
