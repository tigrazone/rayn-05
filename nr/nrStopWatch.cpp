////////////////////////////////////////////////////////////////////////////
//
// nrStopWatch.cpp
//
// A class for stop watch like timing.
//
// Nate Robins, January 2002.
//
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////

#include "nrStopWatch.h"

#include "nrMath.h"

#include <stdio.h>


////////////////////////////////////////////////////////////////////////////
// Public
////////////////////////////////////////////////////////////////////////////

nrStopWatch::nrStopWatch( void )
{
    m_Elapsed = 0;
}

////////////////////////////////////////////////////////////////////////////

nrStopWatch::~nrStopWatch( void )
{
}

////////////////////////////////////////////////////////////////////////////

void nrStopWatch::Start( void )
{
    m_Start = Time();
}

////////////////////////////////////////////////////////////////////////////

void nrStopWatch::Stop( void )
{
    m_Elapsed += Time() - m_Start;
    if ( m_Elapsed < 0 )
    {
        m_Elapsed = 0;
    }
}

////////////////////////////////////////////////////////////////////////////

void nrStopWatch::Reset( void )
{
    m_Elapsed = 0;
}

////////////////////////////////////////////////////////////////////////////

float nrStopWatch::Elapsed( void )
{
    return m_Elapsed;
}

////////////////////////////////////////////////////////////////////////////

const char* nrStopWatch::ElapsedInHMS( void )
{
    static char hms[ 20 ];
    
    int h = ( int )( m_Elapsed / ( 60 * 60 ) ) % ( 60 * 60 );
    int m = ( int )( m_Elapsed / 60 ) % 60;
    int s = ( int )( m_Elapsed ) % 60;
    int t = ( int )( m_Elapsed * 10 ) % 10;
    
    sprintf( hms, "%02d:%02d:%02d.%1d", h, m, s, t );
    
    return hms;
}

////////////////////////////////////////////////////////////////////////////
// Public
////////////////////////////////////////////////////////////////////////////

#include <windows.h>

float nrStopWatch::Time( void )
{
    LARGE_INTEGER t;
    LARGE_INTEGER f;
    
    QueryPerformanceCounter( &t );
    QueryPerformanceFrequency( &f );
    
    float time = ( float )t.QuadPart / ( float )f.QuadPart;
    
    return time;
}

////////////////////////////////////////////////////////////////////////////
