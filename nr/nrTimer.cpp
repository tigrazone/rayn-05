////////////////////////////////////////////////////////////////////////////
//
// nrTimer.cpp
//
// A class for timing.
//
// Nate Robins, March 2001.
//
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////

#include "nrTimer.h"

#include "nrLog.h"


////////////////////////////////////////////////////////////////////////////
// Globals
////////////////////////////////////////////////////////////////////////////

nrTimer g_Timer;


////////////////////////////////////////////////////////////////////////////
// Public
////////////////////////////////////////////////////////////////////////////

nrTimer::nrTimer( void )
{
	m_Time = 0;

    m_LastTime = Time();
	
    m_Paused = false;
	
    m_Multiplier = 1.0f;
}

////////////////////////////////////////////////////////////////////////////

nrTimer::~nrTimer( void )
{
}

////////////////////////////////////////////////////////////////////////////

float nrTimer::GetTime( void )
{
    if ( ! m_Paused )
    {
        Update();
    }
    
    return m_Time;
}

////////////////////////////////////////////////////////////////////////////

float nrTimer::GetWallClockTime( void )
{
	return Time();
}

////////////////////////////////////////////////////////////////////////////

void nrTimer::Pause( void )
{
    if ( ! m_Paused )
    {
        Update();
    }

	m_Paused = true;
}

////////////////////////////////////////////////////////////////////////////

void nrTimer::UnPause( void )
{
    if ( m_Paused )
    {
        m_LastTime = Time();
    }

    m_Paused = false;
}

////////////////////////////////////////////////////////////////////////////

void nrTimer::Multiplier( float multiplier )
{
	m_Multiplier = multiplier;
}


////////////////////////////////////////////////////////////////////////////
// Private
////////////////////////////////////////////////////////////////////////////

void nrTimer::Update( void )
{
    float now = Time();
    
    float elapsed = now - m_LastTime;
    
    m_LastTime = now;
    
    elapsed *= m_Multiplier;
    
    m_Time += elapsed;
}

////////////////////////////////////////////////////////////////////////////

#include <windows.h>

float nrTimer::Time( void )
{
	float time;
	LARGE_INTEGER t;
	
	if ( QueryPerformanceCounter( &t ) )
	{
		LARGE_INTEGER f;

		QueryPerformanceFrequency( &f );

		time = ( float )t.QuadPart / ( float )f.QuadPart;
	} 
	else 
	{
		time = ( float )GetTickCount() / 1000.0f;
	}

	return time;
}

////////////////////////////////////////////////////////////////////////////
