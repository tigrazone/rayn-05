////////////////////////////////////////////////////////////////////////////
//
// nrPencil.cpp
//
// A class for writing (a pencil).
//
// Nate Robins, March 2001.
//
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////

#include "nrPencil.h"

#include <assert.h>
#include <stdio.h>


////////////////////////////////////////////////////////////////////////////
// Globals
////////////////////////////////////////////////////////////////////////////

nrPencil g_Pencil;


////////////////////////////////////////////////////////////////////////////
// Public
////////////////////////////////////////////////////////////////////////////

nrPencil::nrPencil( void )
{
    m_Buffer = NULL;
    m_BufferSize = 64;
    
    Sharpen();
}

////////////////////////////////////////////////////////////////////////////

nrPencil::~nrPencil( void )
{
    delete [] m_Buffer;
}

////////////////////////////////////////////////////////////////////////////

const char* nrPencil::Write( const char* format, ... )
{
    va_list args;
    va_start( args, format );
    const char* string = Compose( format, args );
    va_end( args );
    
    return string;
}

////////////////////////////////////////////////////////////////////////////

#ifdef _WIN32
#define vsnprintf _vsnprintf
#endif

const char* nrPencil::Compose( const char* format, va_list args )
{
    int num_chars;

    do
    {
        num_chars = vsnprintf( m_Buffer, m_BufferSize, format, args );
        
        if ( num_chars == -1 )
        {
            Sharpen();
        }
    }
    while ( num_chars == -1 );
    
    return m_Buffer;
}

////////////////////////////////////////////////////////////////////////////
// Private
////////////////////////////////////////////////////////////////////////////

void nrPencil::Sharpen( void )
{
    delete [] m_Buffer;
    
    m_BufferSize *= 2;
    
    m_Buffer = new char[ m_BufferSize ];
    
    assert( m_Buffer );
}

////////////////////////////////////////////////////////////////////////////
